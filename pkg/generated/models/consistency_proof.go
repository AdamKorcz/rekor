// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConsistencyProof consistency proof
//
// swagger:model ConsistencyProof
type ConsistencyProof struct {

	// The hash value stored at the root of the merkle tree at the first size specified
	// Required: true
	FirstRootHash *string `json:"firstRootHash"`

	// hashes
	// Required: true
	Hashes []string `json:"hashes"`

	// The hash value stored at the root of the merkle tree at the last size specified
	// Required: true
	LastRootHash *string `json:"lastRootHash"`
}

// Validate validates this consistency proof
func (m *ConsistencyProof) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstRootHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHashes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRootHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConsistencyProof) validateFirstRootHash(formats strfmt.Registry) error {

	if err := validate.Required("firstRootHash", "body", m.FirstRootHash); err != nil {
		return err
	}

	return nil
}

func (m *ConsistencyProof) validateHashes(formats strfmt.Registry) error {

	if err := validate.Required("hashes", "body", m.Hashes); err != nil {
		return err
	}

	for i := 0; i < len(m.Hashes); i++ {

		if err := validate.Pattern("hashes"+"."+strconv.Itoa(i), "body", string(m.Hashes[i]), `^[0-9a-fA-F]{64}$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *ConsistencyProof) validateLastRootHash(formats strfmt.Registry) error {

	if err := validate.Required("lastRootHash", "body", m.LastRootHash); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConsistencyProof) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConsistencyProof) UnmarshalBinary(b []byte) error {
	var res ConsistencyProof
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
